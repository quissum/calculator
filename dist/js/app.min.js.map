{"version":3,"file":"app.min.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,kBAAkB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,GAAG,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,GAAG;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA","sources":["webpack://project/webpack/bootstrap","webpack://project/webpack/runtime/make namespace object","webpack://project/./src/js/app.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nconst operators = ['+', '-', '*', '/']\r\n\r\ndocument.addEventListener('click', handleClick)\r\n\r\n// Add an event listener for clicks\r\nfunction handleClick(e) {\r\n  const value = e.target.dataset.value\r\n\r\n  // Check if the element with the result was clicked and copy the text to the clipboard\r\n  if (e.target.hasAttribute('data-result')) {\r\n    Calculator.copyText(e.target)\r\n    return\r\n  }\r\n\r\n  // Handle clicks on number and operator buttons\r\n  if (numbers.includes(+value)) {\r\n    Calculator.input(value)\r\n    return\r\n  }\r\n\r\n  if (operators.includes(value)) {\r\n    Calculator.changeOperator(value)\r\n    return\r\n  }\r\n\r\n  // Handle special keys (C, ., +/-, =, %)\r\n  switch (value) {\r\n    case 'C':\r\n      Calculator.clear()\r\n      break\r\n    case '.':\r\n      Calculator.input('.')\r\n      break\r\n    case '+-':\r\n      Calculator.reverseSign()\r\n      break\r\n    case '=':\r\n      Calculator.calculate()\r\n      break\r\n    case '%':\r\n      Calculator.percent()\r\n      break\r\n  }\r\n}\r\n\r\n// Calculator class with static methods\r\nclass Calculator {\r\n  // Object initialization\r\n  static init() {\r\n    this.$display = document.querySelector('[data-result]')\r\n    this.currentValue = '0'\r\n    this.result = 0\r\n    this.operator = ''\r\n    this.isChangeOperator = false\r\n    this.isCalculated = false\r\n    this.hasComma = false\r\n    this.isCleared = false\r\n  }\r\n\r\n  // Static method for inputting values\r\n  static input(i) {\r\n    // If the operator has just changed or a calculation has been performed, clear the current value\r\n    if (this.isChangeOperator || this.isCalculated) {\r\n      this.currentValue = '0'\r\n      this.isChangeOperator = false\r\n      this.isCalculated = false\r\n    }\r\n\r\n    // Limit the number of characters in the input (max 9 or 10 with a comma)\r\n    if (this.currentValue.length >= (this.hasComma ? 10 : 9)) return\r\n\r\n    // Handling of a comma\r\n    if (i === '.' && this.hasComma) return\r\n    this.hasComma = i === '.' ? true : this.hasComma\r\n\r\n    // Handling of the initial value\r\n    if (this.currentValue === '0' && i !== '.') this.currentValue = ''\r\n    else if (this.currentValue === '-0' && i !== '.') this.currentValue = '-'\r\n\r\n    // Mark that the value is not cleared, add the entered value, and output the result\r\n    this.setIsCleared(false)\r\n    this.currentValue += i\r\n    this.output()\r\n  }\r\n\r\n  // Static method to reverse the sign\r\n  static reverseSign() {\r\n    this.currentValue = this.currentValue.toString()\r\n    this.currentValue = this.currentValue[0] === '-' ? this.currentValue.slice(1) : `-${this.currentValue}`\r\n\r\n    this.output()\r\n  }\r\n\r\n  // Static method to calculate percentages\r\n  static percent() {\r\n    const percentage = this.result ? this.result / 100 : 0.01\r\n    const result = this.currentValue * percentage\r\n\r\n    this.currentValue = this.checkResult(result).toString()\r\n    this.output()\r\n  }\r\n\r\n  // Static method to change the operator\r\n  static changeOperator(operator) {\r\n    if (!this.isChangeOperator && this.operator) this.calculate()\r\n\r\n    this.setOperator(operator)\r\n    this.result = parseFloat(this.currentValue)\r\n    this.isChangeOperator = true\r\n    this.hasComma = false\r\n  }\r\n\r\n  // Static method to perform calculations and obtain the result\r\n  static calculate() {\r\n    const currentValueAsNum = +this.currentValue\r\n\r\n    switch (this.operator) {\r\n      case '+':\r\n        this.result += currentValueAsNum\r\n        break\r\n      case '-':\r\n        this.result -= currentValueAsNum\r\n        break\r\n      case '*':\r\n        this.result *= currentValueAsNum\r\n        break\r\n      case '/':\r\n        if (currentValueAsNum === 0) return\r\n        this.result /= currentValueAsNum\r\n        break\r\n    }\r\n\r\n    // Check and output the result\r\n    this.currentValue = this.result = this.checkResult(this.result)\r\n    this.setOperator('')\r\n    this.isCalculated = true\r\n    this.output()\r\n  }\r\n\r\n  // Static method to check and format the result\r\n  static checkResult(number) {\r\n    const stringValue = number.toString()\r\n    const [toDecimal, afterDecimal] = stringValue.split('.')\r\n\r\n    if (stringValue.length > 10) {\r\n      if (stringValue.indexOf('e-') !== -1) {\r\n        // Reduce the negative exponential number\r\n        const indexExponent = stringValue.indexOf('e-')\r\n\r\n        return `${toDecimal + stringValue.slice(indexExponent)}`\r\n      }\r\n      if (toDecimal.length > 10) {\r\n        // Convert to exponential number\r\n        const exponentValue = number.toExponential(5).replace('+', '')\r\n        const [num, e] = exponentValue.split('e')\r\n        const filteredNum = this.delZeroInNumber(num)\r\n\r\n        return `${filteredNum}e${e}`\r\n      }\r\n      if (afterDecimal.length > 0) {\r\n        // Reduce the floating-point number\r\n        const length = Math.max(0, 9 - toDecimal.length)\r\n        const toFixedNum = number.toFixed(length)\r\n\r\n        return this.delZeroInNumber(toFixedNum)\r\n      }\r\n    }\r\n    return number\r\n  }\r\n\r\n  // Static method to clear the value\r\n  static clear() {\r\n    if (this.isCleared) {\r\n      this.allClear()\r\n      return\r\n    }\r\n\r\n    this.currentValue = '0'\r\n    this.hasComma = false\r\n    this.output()\r\n    this.setIsCleared(true)\r\n  }\r\n\r\n  // Static method for full clearing\r\n  static allClear() {\r\n    this.currentValue = '0'\r\n    this.result = 0\r\n    this.setOperator('')\r\n    this.isChangeOperator = false\r\n    this.isCalculated = false\r\n    this.hasComma = false\r\n    this.output()\r\n  }\r\n\r\n  // Static method to output the result on the screen\r\n  static output() {\r\n    this.$display.textContent = this.currentValue\r\n  }\r\n\r\n  // Static method to set the cleared flag\r\n  static setIsCleared(bool) {\r\n    this.isCleared = bool\r\n    this.changeBtnClear(bool)\r\n  }\r\n\r\n  // Static method to set the operator\r\n  static setOperator(operator) {\r\n    this.operator = operator\r\n    this.changeActiveBtn()\r\n  }\r\n\r\n  // Static method to change the active operator button\r\n  static changeActiveBtn() {\r\n    const btns = operators.map(el => document.querySelector(`[data-value=\"${el}\"]`))\r\n    const $currentBtn = btns.find(el => el.dataset.value === this.operator)\r\n\r\n    btns.forEach($el => $el.classList.remove('_active'))\r\n    $currentBtn?.classList.add('_active')\r\n  }\r\n\r\n  // Static method to change the text on the clear button\r\n  static changeBtnClear(bool) {\r\n    const $btn = document.querySelector('[data-value=\"C\"]')\r\n    $btn.textContent = bool ? 'AC' : 'C'\r\n  }\r\n\r\n  // Static method to remove zeros in a number\r\n  static delZeroInNumber(number) {\r\n    let isNum = false\r\n\r\n    const filteredNum = number\r\n      .split('')\r\n      .reverse()\r\n      .reduce((result, digit) => {\r\n        if (digit !== '0' && digit !== '.') {\r\n          isNum = true\r\n        }\r\n\r\n        if (isNum) {\r\n          result.unshift(digit)\r\n        }\r\n\r\n        return result\r\n      }, [])\r\n      .join('')\r\n\r\n    return filteredNum\r\n  }\r\n\r\n  // Async static method for copying text to the clipboard\r\n  static async copyText() {\r\n    try {\r\n      const text = this.$display.textContent\r\n      await navigator.clipboard.writeText(text)\r\n      this.toggleClassAfterCopy()\r\n    } catch (err) {\r\n      console.error('Unable to copy text to clipboard', err)\r\n    }\r\n  }\r\n\r\n  // Static method to toggle the '_active' class on the display element after copy\r\n  static toggleClassAfterCopy() {\r\n    this.$display.classList.add('_active')\r\n    setTimeout(() => {\r\n      this.$display.classList.remove('_active')\r\n    }, 10)\r\n  }\r\n}\r\n\r\n// Initialization of the calculator when the page is loaded\r\nCalculator.init()\r\n"],"names":[],"sourceRoot":""}